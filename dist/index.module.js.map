{"version":3,"file":"index.module.js","sources":["../src/array/array.ts","../src/index.ts","../src/math/math.ts","../src/map/lat-long.ts","../src/map/map-tiles.ts","../src/files/files.ts","../src/dates/calendar.ts"],"sourcesContent":["export const arrayDiff = (oldArray: string[], newArray: string[]) => {\r\n  return {\r\n    added: newArray.filter(ni => !oldArray?.includes(ni)),\r\n    same: newArray.filter(ni => oldArray.includes(ni)),\r\n    removed: oldArray.filter(oi => !newArray?.includes(oi))\r\n  }\r\n}\r\n\r\nexport const arrayMove = (array: any[], index: number, move: -1 | 1) => {\r\n  const arrayCopy = JSON.parse(JSON.stringify(array))\r\n  const newPosition = index + move\r\n\r\n  if(newPosition > array.length || newPosition < 0) return array\r\n\r\n  arrayCopy[newPosition] = arrayCopy[index]\r\n  arrayCopy[index] = array[newPosition]\r\n\r\n  return arrayCopy\r\n}\r\n\r\nexport const getKey = (data: any, key: string): any => {\r\n  const dotIndex = key.indexOf(\".\")\r\n\r\n  if (dotIndex >= 0) {\r\n    const preKey = key.substr(0, dotIndex)\r\n    const newKey = key.substr(dotIndex + 1)\r\n\r\n    if (!data[preKey]) return null\r\n\r\n    return getKey(data[preKey], newKey)\r\n  }\r\n\r\n  return data[key]\r\n}\r\n","import * as math from \"./math/math\"\nimport * as latLon from \"./map/lat-long\"\nimport * as mapTiles from \"./map/map-tiles\"\nimport * as array from \"./array/array\"\nimport * as files from \"./files/files\"\nimport * as calendar from \"./dates/calendar\"\n\nexport default {\n  math,\n  latLon,\n  mapTiles,\n  array,\n  files,\n  calendar\n}\n","export function mapValue(value: number, valMin:number, valMax:number, outMin: number, outMax: number) {\r\n  return outMin + ((value - valMin) * (outMax - outMin)) / (valMax - valMin);\r\n}\r\n\r\nexport function degToRad(degrees: number) {\r\n  return degrees * (Math.PI / 180);\r\n}\r\n","interface LatLong {\r\n  lat: number\r\n  lon: number\r\n}\r\n\r\nexport function calculateDistance(point1: LatLong, point2: LatLong) {\r\n  // Earth's radius in kilometers\r\n  const earthRadius = 6371;\r\n\r\n  // Convert degrees to radians\r\n  const toRadian = (degree: number) => degree * Math.PI / 180;\r\n\r\n  // Convert latitude and longitude from degrees to radians\r\n  const phi1 = toRadian(point1.lat);\r\n  const phi2 = toRadian(point2.lat);\r\n  const deltaPhi = toRadian(point2.lat - point1.lat);\r\n  const deltaLambda = toRadian(point2.lon - point1.lon);\r\n\r\n  // Haversine formula\r\n  const a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\r\n    Math.cos(phi1) * Math.cos(phi2) *\r\n    Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  // Calculate distance in kilometers\r\n  let distance = earthRadius * c;\r\n\r\n  return distance *= 1000; // Convert to meters;\r\n}\r\n","export function latLonToMapTile(lat: number, lon: number, zoom: number) {\r\n  const x = Math.floor((lon + 180) / 360 * Math.pow(2, zoom));\r\n  const y = Math.floor((1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom));\r\n  return {x: x, y: y, z: zoom};\r\n}\r\n\r\n\r\nexport function getTileWidthInMeters(zoom: number, lat: number) {\r\n  const earthCircumference = 40075016.686; // in meters\r\n  const numTiles = 2 ** zoom; // number of tiles at given zoom level\r\n  const metersPerTile = earthCircumference / numTiles; // tile width at the equator\r\n\r\n  // Adjust for latitude using the Mercator projection\r\n  const latRad = lat * (Math.PI / 180); // Convert latitude to radians\r\n  const scaleFactor = Math.cos(latRad); // Mercator scale correction\r\n\r\n  return metersPerTile * scaleFactor;\r\n}\r\n","export const b64toBlob = (base64: string): Promise<Blob> => fetch(base64).then((res) => res.blob())\r\n","export const getCalendar = (year: number, month: number) => {\r\n  const firstDay = new Date(year, month - 1, 1)\r\n  const lastDay = new Date(year, month, 0)\r\n\r\n  const weeks: { date: Date, diffMonth?: boolean, day: number, YMD: { y: number, m: number, d: number } }[][] = [[]];\r\n\r\n  const firstDayDay = firstDay.getDay() - 1 < 0 ? 6 : firstDay.getDay() - 1\r\n\r\n  //PREV Month\r\n  for (let i = 0; i < firstDayDay; i++) {\r\n    const date = new Date(year, month - 1, 1)\r\n    date.setDate(date.getDate() - (firstDayDay - i))\r\n\r\n\r\n    weeks[0][i] = {\r\n      date,\r\n      day: date.getDay() - 1 < 0 ? 6 : date.getDay() - 1,\r\n      YMD: {y: date.getFullYear(), m: date.getMonth() + 1, d: date.getDate()},\r\n      diffMonth: true\r\n    }\r\n  }\r\n\r\n  //Current month\r\n  for (let i = 0; i < lastDay.getDate(); i++) {\r\n    const totalIndex = firstDayDay + i\r\n    const week = Math.floor(totalIndex / 7)\r\n    const day = totalIndex - (week * 7)\r\n\r\n    if (!weeks[week]) weeks[week] = []\r\n\r\n    const date = new Date(year, month - 1, i + 1)\r\n\r\n    weeks[week][day] = {\r\n      date,\r\n      day: date.getDay() - 1 < 0 ? 6 : date.getDay() - 1,\r\n      YMD: {y: year, m: month, d: i + 1}\r\n    }\r\n  }\r\n\r\n  //NextMonth\r\n  for (let i = 0; weeks[weeks.length - 1].length !== 7; i++) {\r\n    const week = weeks[weeks.length - 1]\r\n\r\n    const date = new Date(year, month - 1, 1)\r\n    date.setDate(lastDay.getDate() + i + 1)\r\n\r\n    week[week.length] = {\r\n      date,\r\n      day: date.getDay() - 1 < 0 ? 6 : date.getDay() - 1,\r\n      YMD: {y: date.getFullYear(), m: date.getMonth() + 1, d: date.getDate()},\r\n      diffMonth: true\r\n    }\r\n  }\r\n\r\n  return weeks\r\n}\r\n"],"names":["getKey","data","key","dotIndex","indexOf","preKey","substr","newKey","oldArray","newArray","added","filter","ni","includes","same","removed","oi","array","index","move","arrayCopy","JSON","parse","stringify","newPosition","length","math","value","valMin","valMax","outMin","outMax","degrees","Math","PI","latLon","point1","point2","toRadian","degree","phi1","lat","phi2","deltaPhi","deltaLambda","lon","a","sin","cos","atan2","sqrt","mapTiles","zoom","x","floor","pow","y","log","tan","z","numTiles","latRad","files","base64","fetch","then","res","blob","calendar","year","month","firstDay","Date","lastDay","weeks","firstDayDay","getDay","i","date","setDate","getDate","day","YMD","getFullYear","m","getMonth","d","diffMonth","totalIndex","week"],"mappings":"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"}